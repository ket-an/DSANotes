//contains code related to creation of binary tree using preorder traversal and operation on tree such as inorder,preorder,postorder,levelorder traversal of the tree.
import java.util.*;
//Node structure
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

//Implementation of binary tree
class BinaryTree{
    static int idx = -1;
    //creation of binary tree
    public static Node buildBinaryTree(int[] node)
    {
       idx++;
       if(node[idx]==-1)
       {
           return null;
       }
       
       Node newNode = new Node(node[idx]);
       newNode.left = buildBinaryTree(node);
       newNode.right = buildBinaryTree(node);
       
       return newNode;
    }
    
    //preorder traversal of binary tree
    public static void displayPreorder(Node root)
    {
        if(root == null)
            return;
        
        System.out.print(root.data+" ");
        displayPreorder(root.left);
        displayPreorder(root.right);
    }
   
   //inorder traversal of binary tree
    public static void displayInorder(Node root)
    {
        if(root == null)
            return;
        
        displayInorder(root.left);
        System.out.print(root.data+" ");
        displayInorder(root.right);
    }
    
    //postorder traversal of binary tree
    public static void displayPostorder(Node root)
    {
        if(root == null)
            return;
            
        displayPostorder(root.left);
        displayPostorder(root.right);
        System.out.print(root.data+" ");
    }
    
    //levelorder traversal of binary tree
    public static void displayLevelorder(Node root)
    {
        if(root == null)
            return;
            
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        while(!q.isEmpty())
        {
            Node currentNode = q.remove();
            if(currentNode == null){
                System.out.println();
                if(!q.isEmpty())
                    q.add(null);
                else
                    break;
            }else{
                System.out.print(currentNode.data+" ");
                if(currentNode.left != null)
                    q.add(currentNode.left);
                if(currentNode.right != null)
                    q.add(currentNode.right);
            }
        }
    }
}
class HelloWorld {
    public static void main(String[] args) {
        int node[] = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinaryTree bt = new BinaryTree();
        Node root = bt.buildBinaryTree(node);
        
        System.out.print("Preorder Traversal: ");
        bt.displayPreorder(root);
        System.out.println();
        System.out.print("Inorder Traversal: ");
        bt.displayInorder(root);
        System.out.println();
        System.out.print("Postorder Traversal: ");
        bt.displayPostorder(root);
        System.out.println();
        System.out.print("Levelorder Traversal: ");
        bt.displayLevelorder(root);
    }
}
